{"name":"Toon Energy","type":"com.fibaro.powerSensor","apiVersion":"1.2","initialProperties":{"viewLayout":{"$jason":{"body":{"header":{"style":{"height":"0"},"title":"quickApp_device_1013"},"sections":{"items":[{"components":[{"name":"label1","style":{"weight":"1.2"},"text":"Label1","type":"label","visible":true},{"style":{"weight":"0.5"},"type":"space"}],"style":{"weight":"1.2"},"type":"vertical"}]}},"head":{"title":"quickApp_device_1013"}}},"uiCallbacks":[],"quickAppVariables":[{"name":"IPaddress","type":"string","value":"192.168.1.50"},{"name":"Interval","type":"string","value":"10"},{"name":"debugLevel","type":"string","value":"1"}],"typeTemplateInitialized":true},"files":[{"name":"main","isMain":true,"isOpen":true,"content":"-- QUICKAPP TOON ENERGY\n\n-- This Quickapp retrieves energy consumption, energy production and gas usage from the Toon Energymeter\n\n-- This QuickApp has Child Devices for Consumption (Watt), Production (Watt), Consumption High (kWh), Consumption Low (kWh), Production High (kWh), Production Low (kWh), Gas Usage (l/h) and Total Gas (m³)\n\n-- The Energy Usage from the Child devices Consumption High, Consumption Low, Production High and Production Low can be used for the HC3 Energy Panel\n\n-- The Toon needs to be rooted, see: https://github.com/JackV2020/Root-A-Toon-USB-Stick\n-- Recommended all in one solution for a one time boot from USB stick, 10 minutes of work and done. \n\n-- After rooting you don't need a subscription anymore and you have access to a ToonStore with a growing number of apps. For more technical people there is a possibility to ssh into the Toon if they want with username root and password toon. Rooting is at your own risk, look here for further support and info: \n-- See also: https://github.com/ToonSoftwareCollective/Root-A-Toon (if you already have a running Linux environment)\n-- See also: https://toonforum.nl/ \n-- See also: https://www.domoticaforum.eu/\n\n\n-- Version 1.0 (3th October 2021)\n-- Ready for download\n\n-- Version 0.2 (30th September 2021)\n-- Gas from m³/h to l/h\n-- Splashed a bug\n\n-- Version 0.1 (29th September 2021)\n-- Initial version\n\n\n-- Variables (mandatory): \n-- IPaddress = IP address of your Toon Meter\n-- Interval = Number in seconds \n-- debugLevel = Number (1=some, 2=few, 3=all, 4=simulation mode) (default = 1)\n\n\n-- Example content Json table Toon\n--[[\n{\n  \"dev_2\": {\n    \"uuid\": \"9cf0673f-799f-46b5-88a1-a6bf9d2a663e\",\n    \"name\": \"HAE_METER_v3\",\n    \"internalAddress\": \"2\",\n    \"type\": \"HAE_METER_v3\",\n    \"supportsCrc\": \"1\",\n    \"ccList\": \"5e 86 72 32 56 5a 59 85 73 7a 60 8e 22 70 8b 3c 3d 3e\",\n    \"supportedCC\": \"5e 86 72 32 56 5a 59 85 73 7a 60 8e 22 70 8b 3c 3d 3e\",\n    \"nodeFlags\": [],\n    \"IsConnected\": \"1\",\n    \"HealthValue\": \"10\",\n    \"DeviceName\": \"HAE_METER_v3\",\n    \"CurrentSensorStatus\": \"UNKNOWN\"\n  },\n  \"dev_2.1\": {\n    \"uuid\": \"e40169ea-c41a-4da7-aec0-768994307e67\",\n    \"name\": \"HAE_METER_v3_1\",\n    \"internalAddress\": \"2.1\",\n    \"type\": \"HAE_METER_v3_1\",\n    \"supportsCrc\": \"0\",\n    \"ccList\": \"5e 59 85 8e 3c 3d 3e\",\n    \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\",\n    \"nodeFlags\": [],\n    \"CurrentSensorStatus\": \"WARNING\",\n    \"CurrentGasFlow\": \"71.00\",\n    \"CurrentGasQuantity\": \"969260.00\",\n    \"DeviceName\": \"HAE_METER_v3_1\"\n  },\n  \"dev_2.2\": {\n    \"uuid\": \"bbb384e2-63fe-4b1d-b592-70cea5e0188c\",\n    \"name\": \"HAE_METER_v3_2\",\n    \"internalAddress\": \"2.2\",\n    \"type\": \"HAE_METER_v3_2\",\n    \"supportsCrc\": \"0\",\n    \"ccList\": \"5e 59 85 8e 3c 3d 3e\",\n    \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\",\n    \"nodeFlags\": [],\n    \"CurrentSensorStatus\": \"UNKNOWN\",\n    \"DeviceName\": \"HAE_METER_v3_2\",\n    \"CurrentElectricityFlow\": \"NaN\",\n    \"CurrentElectricityQuantity\": \"NaN\"\n  },\n  \"dev_2.3\": {\n    \"uuid\": \"286c9eea-c9a2-42c6-9fc1-3e1bb271d8c8\",\n    \"name\": \"HAE_METER_v3_3\",\n    \"internalAddress\": \"2.3\",\n    \"type\": \"HAE_METER_v3_3\",\n    \"supportsCrc\": \"0\",\n    \"ccList\": \"5e 59 85 8e 3c 3d 3e\",\n    \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\",\n    \"nodeFlags\": [],\n    \"CurrentSensorStatus\": \"UNKNOWN\",\n    \"DeviceName\": \"HAE_METER_v3_3\",\n    \"CurrentElectricityFlow\": \"NaN\",\n    \"CurrentElectricityQuantity\": \"NaN\"\n  },\n  \"dev_2.4\": {\n    \"uuid\": \"f665213b-87ae-4faa-accb-03fd863138d8\",\n    \"name\": \"HAE_METER_v3_4\",\n    \"internalAddress\": \"2.4\",\n    \"type\": \"HAE_METER_v3_4\",\n    \"supportsCrc\": \"0\",\n    \"ccList\": \"5e 59 85 8e 3c 3d 3e\",\n    \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\",\n    \"nodeFlags\": [],\n    \"CurrentSensorStatus\": \"WARNING\",\n    \"DeviceName\": \"HAE_METER_v3_4\",\n    \"CurrentElectricityFlow\": \"499.00\",\n    \"CurrentElectricityQuantity\": \"2356741.00\"\n  },\n  \"dev_2.5\": {\n    \"uuid\": \"41b82ea8-7b8a-4eed-b570-b562fd303ac7\",\n    \"name\": \"HAE_METER_v3_5\",\n    \"internalAddress\": \"2.5\",\n    \"type\": \"HAE_METER_v3_5\",\n    \"supportsCrc\": \"0\",\n    \"ccList\": \"5e 59 85 8e 3c 3d 3e\",\n    \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\",\n    \"nodeFlags\": [],\n    \"CurrentSensorStatus\": \"UNKNOWN\",\n    \"DeviceName\": \"HAE_METER_v3_5\",\n    \"CurrentElectricityFlow\": \"312.00\",\n    \"CurrentElectricityQuantity\": \"1287325.00\"\n  },\n  \"dev_2.6\": {\n    \"uuid\": \"bffb19a2-6dfa-4c40-906b-1051e7e91a74\",\n    \"name\": \"HAE_METER_v3_6\",\n    \"internalAddress\": \"2.6\",\n    \"type\": \"HAE_METER_v3_6\",\n    \"supportsCrc\": \"0\",\n    \"ccList\": \"5e 59 85 8e 3c 3d 3e\",\n    \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\",\n    \"nodeFlags\": [],\n    \"CurrentSensorStatus\": \"UNKNOWN\",\n    \"DeviceName\": \"HAE_METER_v3_6\",\n    \"CurrentElectricityFlow\": \"0.00\",\n    \"CurrentElectricityQuantity\": \"1862969.00\"\n  },\n  \"dev_2.7\": {\n    \"uuid\": \"828d2fba-f815-4b20-9ff9-f8ec0fa4e21e\",\n    \"name\": \"HAE_METER_v3_7\",\n    \"internalAddress\": \"2.7\",\n    \"type\": \"HAE_METER_v3_7\",\n    \"supportsCrc\": \"0\",\n    \"ccList\": \"5e 59 85 8e 3c 3d 3e\",\n    \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\",\n    \"nodeFlags\": [],\n    \"CurrentSensorStatus\": \"UNKNOWN\",\n    \"DeviceName\": \"HAE_METER_v3_7\",\n    \"CurrentElectricityFlow\": \"0.00\",\n    \"CurrentElectricityQuantity\": \"923615.00\"\n  },\n  \"dev_2.8\": {\n    \"uuid\": \"f76e822a-b29e-4007-901f-4cc7d52fbc68\",\n    \"name\": \"HAE_METER_v3_8\",\n    \"internalAddress\": \"2.8\",\n    \"type\": \"HAE_METER_v3_8\",\n    \"supportsCrc\": \"0\",\n    \"ccList\": \"5e 59 85 8e 3c 3d 3e\",\n    \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\",\n    \"nodeFlags\": [],\n    \"CurrentSensorStatus\": \"UNKNOWN\",\n    \"DeviceName\": \"HAE_METER_v3_8\",\n    \"CurrentHeatQuantity\": \"NaN\",\n    \"CurrentHeatFlow\": \"NaN\"\n  }\n}\n-- ]]\n  \n  \n-- No editing of this code is needed \n\n\nclass 'consumption'(QuickAppChild)\nfunction consumption:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"consumption QuickappChild initiated, deviceId:\",self.id)\nend\nfunction consumption:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.Consumption))\n  self:updateProperty(\"power\", tonumber(data.Consumption))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"Total: \"..string.format(\"%.0f\",data.Consumption_Total) ..\" kWh\")\nend\n\n\nclass 'production'(QuickAppChild)\nfunction production:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"production QuickappChild initiated, deviceId:\",self.id)\nend\nfunction production:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.Production))\n  self:updateProperty(\"power\", tonumber(data.Production))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", \"Total: \"..string.format(\"%.0f\",data.Production_Total) ..\" kWh\")\nend\n\n\nclass 'consumption_high'(QuickAppChild)\nfunction consumption_high:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"consumption_high QuickappChild initiated, deviceId:\",self.id)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"consumption\" then \n    self:updateProperty(\"rateType\", \"consumption\")\n    self:warning(\"Changed rateType interface of Consumption High child device (\" ..self.id ..\") to consumption\")\n  end\nend\nfunction consumption_high:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.Consumption_Total_H))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nclass 'consumption_low'(QuickAppChild)\nfunction consumption_low:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"consumption_low QuickappChild initiated, deviceId:\",self.id)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"consumption\" then \n    self:updateProperty(\"rateType\", \"consumption\")\n    self:warning(\"Changed rateType interface of Consumption Low child device (\" ..self.id ..\") to consumption\")\n  end\nend\nfunction consumption_low:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.Consumption_Total_L))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nclass 'production_high'(QuickAppChild)\nfunction production_high:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"production_high QuickappChild initiated, deviceId:\",self.id)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"production\" then \n    self:updateProperty(\"rateType\", \"production\")\n    self:warning(\"Changed rateType interface of Production High child device (\" ..self.id ..\") to production\")\n  end\nend\nfunction production_high:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.Production_Total_H))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nclass 'production_low'(QuickAppChild)\nfunction production_low:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"production_low QuickappChild initiated, deviceId:\",self.id)\n  if fibaro.getValue(self.id, \"rateType\") ~= \"production\" then \n    self:updateProperty(\"rateType\", \"production\")\n    self:warning(\"Changed rateType interface of Production Low child device (\" ..self.id ..\") to production\")\n  end\nend\nfunction production_low:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.Production_Total_L))\n  self:updateProperty(\"unit\", \"kWh\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nclass 'gas'(QuickAppChild)\nfunction gas:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"gas QuickappChild initiated, deviceId:\",self.id)\nend\nfunction gas:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.Gas_Usage))\n  self:updateProperty(\"unit\", \"l/h\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nclass 'total_gas'(QuickAppChild)\nfunction total_gas:__init(dev)\n  QuickAppChild.__init(self,dev)\n  --self:trace(\"total_gas QuickappChild initiated, deviceId:\",self.id)\nend\nfunction total_gas:updateValue(data) \n  self:updateProperty(\"value\", tonumber(data.Gas_Total))\n  self:updateProperty(\"unit\", \"m³\")\n  self:updateProperty(\"log\", \" \")\nend\n\n\nlocal function getChildVariable(child,varName)\n  for _,v in ipairs(child.properties.quickAppVariables or {}) do\n    if v.name==varName then return v.value end\n  end\n  return \"\"\nend\n\n\n-- QuickApp Functions\n\n\nfunction QuickApp:updateChildDevices() -- Update Child Devices\n  for id,child in pairs(self.childDevices) do \n    child:updateValue(data) \n  end\nend\n\n\nfunction QuickApp:logging(level,text) -- Logging function for debug messages\n  if tonumber(debugLevel) >= tonumber(level) then \n    self:debug(text)\n  end\nend\n\n\nfunction QuickApp:updateProperties() -- Update the properties\n  self:logging(3,\"QuickApp:updateProperties\")\n  self:updateProperty(\"value\", tonumber(data.netConsumption))\n  self:updateProperty(\"power\", tonumber(data.netConsumption))\n  self:updateProperty(\"unit\", \"Watt\")\n  self:updateProperty(\"log\", os.date(\"%d-%m-%Y %T\"))\nend\n\n\nfunction QuickApp:updateVariables() -- Update the Variables\n  self:logging(3,\"QuickApp:updateVariables\")\n\n  -- Consumption\n  self:setVariable(\"Consumption\",tostring(data.Consumption)) \n  self:setVariable(\"Consumption_Total_H\",tostring(data.Consumption_Total_H)) \n  self:setVariable(\"Consumption_Total_L\",tostring(data.Consumption_Total_L)) \n  self:setVariable(\"Consumption_Total\",tostring(data.Consumption_Total)) \n\n  -- Production\n  self:setVariable(\"Production\",tostring(data.Production))\n  self:setVariable(\"Production_Total_H\",tostring(data.Production_Total_H)) \n  self:setVariable(\"Production_Total_L\",tostring(data.Production_Total_L)) \n  self:setVariable(\"Production_Total\",tostring(data.Production_Total)) \n\n  -- Gas \n  self:setVariable(\"Gas_Usage\",tostring(data.Gas_Usage))\n  self:setVariable(\"Gas_Total\",tostring(data.Gas_Total))\n  \nend\n\n\nfunction QuickApp:updateLabels() -- Update the labels\n  self:logging(3,\"QuickApp:updateLabels\")\n\n  local labelText = \"\"\n\n  labelText = labelText ..\"Consumption: \" ..data.Consumption ..\" Watt\" ..\"\\n\"\n  labelText = labelText ..\"Production: \" ..data.Production ..\" Watt\" ..\"\\n\\n\"\n\n  -- High/Low \n  labelText = labelText ..\"Consumption High: \" ..data.Consumption_H ..\" Watt\" ..\"\\n\"\n  labelText = labelText ..\"Consumption Low: \" ..data.Consumption_L ..\" Watt\" ..\"\\n\"\n  labelText = labelText ..\"Production High: \" ..data.Production_H ..\" Watt\" ..\"\\n\"\n  labelText = labelText ..\"Production Low: \" ..data.Production_L ..\" Watt\" ..\"\\n\\n\"\n\n  -- Consumption Totals \n  labelText = labelText ..\"Consumption High: \"..data.Consumption_Total_H ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Consumption Low: \"..data.Consumption_Total_L ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Consumption Total: \"..data.Consumption_Total ..\" kWh\" ..\"\\n\\n\"\n\n  -- Production Totals\n  labelText = labelText ..\"Production High: \"..data.Production_Total_H ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Production Low: \"..data.Production_Total_L ..\" kWh\" ..\"\\n\"\n  labelText = labelText ..\"Production Total: \"..data.Production_Total ..\" kWh\" ..\"\\n\\n\"\n\n  -- Gas Consumption \n  labelText = labelText ..\"Gas Usage: \"..data.Gas_Usage ..\" l/h\" ..\"\\n\"\n  labelText = labelText ..\"Gas Total: \"..data.Gas_Total ..\" m³\" ..\"\\n\\n\"\n  \n  labelText = labelText ..\"Last Run: \"..os.date(\"%d-%m-%Y %T\") ..\"\\n\"\n\n  self:updateView(\"label1\", \"text\", labelText)\n  self:logging(2,labelText)\nend\n\n\nfunction QuickApp:valuesToon() -- Get the values from json file\n  self:logging(3,\"QuickApp:valuesToon\")\n  \n  -- Consumption\n  data.Consumption_H = string.format(\"%.3f\",jsonTable['dev_2.4'].CurrentElectricityFlow)\n  data.Consumption_L = string.format(\"%.3f\",jsonTable['dev_2.6'].CurrentElectricityFlow)\n  data.Consumption = string.format(\"%.3f\",tonumber(data.Consumption_H)+tonumber(data.Consumption_L))\n  data.Consumption_Total_H = string.format(\"%.1f\",tonumber(jsonTable['dev_2.4'].CurrentElectricityQuantity)/1000)\n  data.Consumption_Total_L = string.format(\"%.1f\",tonumber(jsonTable['dev_2.6'].CurrentElectricityQuantity)/1000)\n  data.Consumption_Total = string.format(\"%.1f\",tonumber(data.Consumption_Total_H)+tonumber(data.Consumption_Total_L))\n\n  -- Production\n  data.Production_H = string.format(\"%.3f\",jsonTable['dev_2.5'].CurrentElectricityFlow)\n  data.Production_L = string.format(\"%.3f\",jsonTable['dev_2.7'].CurrentElectricityFlow)\n  data.Production = string.format(\"%.3f\",tonumber(data.Production_H)+tonumber(data.Production_L))\n  data.Production_Total_H = string.format(\"%.1f\",tonumber(jsonTable['dev_2.5'].CurrentElectricityQuantity)/1000)\n  data.Production_Total_L = string.format(\"%.1f\",tonumber(jsonTable['dev_2.7'].CurrentElectricityQuantity)/1000)\n  data.Production_Total = string.format(\"%.1f\",tonumber(data.Production_Total_H)+tonumber(data.Production_Total_L))\n  \n  -- Net Consumption/Production\n  data.netConsumption = string.format(\"%.3f\",tonumber(data.Consumption) - tonumber(data.Production))\n\n  -- Gas \n  data.Gas_Usage = string.format(\"%.1f\",jsonTable['dev_2.1'].CurrentGasFlow)\n  data.Gas_Total = string.format(\"%.1f\",tonumber(jsonTable['dev_2.1'].CurrentGasQuantity)/1000)\n\nend\n\n\nfunction QuickApp:simData() -- Simulate Toon\n  self:logging(3,\"simData\")\n  apiResult = '{\"dev_2\": {\"uuid\": \"9cf0673f-799f-46b5-88a1-a6bf9d2a663e\", \"name\": \"HAE_METER_v3\", \"internalAddress\": \"2\", \"type\": \"HAE_METER_v3\", \"supportsCrc\": \"1\", \"ccList\": \"5e 86 72 32 56 5a 59 85 73 7a 60 8e 22 70 8b 3c 3d 3e\", \"supportedCC\": \"5e 86 72 32 56 5a 59 85 73 7a 60 8e 22 70 8b 3c 3d 3e\", \"nodeFlags\": [], \"IsConnected\": \"1\", \"HealthValue\": \"10\", \"DeviceName\": \"HAE_METER_v3\", \"CurrentSensorStatus\": \"UNKNOWN\"}, \"dev_2.1\": {\"uuid\": \"e40169ea-c41a-4da7-aec0-768994307e67\", \"name\": \"HAE_METER_v3_1\", \"internalAddress\": \"2.1\", \"type\": \"HAE_METER_v3_1\", \"supportsCrc\": \"0\", \"ccList\": \"5e 59 85 8e 3c 3d 3e\", \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\", \"nodeFlags\": [], \"CurrentSensorStatus\": \"WARNING\", \"CurrentGasFlow\": \"71.00\", \"CurrentGasQuantity\": \"969260.00\", \"DeviceName\": \"HAE_METER_v3_1\"}, \"dev_2.2\": {\"uuid\": \"bbb384e2-63fe-4b1d-b592-70cea5e0188c\", \"name\": \"HAE_METER_v3_2\", \"internalAddress\": \"2.2\", \"type\": \"HAE_METER_v3_2\", \"supportsCrc\": \"0\", \"ccList\": \"5e 59 85 8e 3c 3d 3e\", \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\", \"nodeFlags\": [], \"CurrentSensorStatus\": \"UNKNOWN\", \"DeviceName\": \"HAE_METER_v3_2\", \"CurrentElectricityFlow\": \"NaN\", \"CurrentElectricityQuantity\": \"NaN\"}, \"dev_2.3\": {\"uuid\": \"286c9eea-c9a2-42c6-9fc1-3e1bb271d8c8\", \"name\": \"HAE_METER_v3_3\", \"internalAddress\": \"2.3\", \"type\": \"HAE_METER_v3_3\", \"supportsCrc\": \"0\", \"ccList\": \"5e 59 85 8e 3c 3d 3e\", \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\", \"nodeFlags\": [], \"CurrentSensorStatus\": \"UNKNOWN\", \"DeviceName\": \"HAE_METER_v3_3\", \"CurrentElectricityFlow\": \"NaN\", \"CurrentElectricityQuantity\": \"NaN\"}, \"dev_2.4\": {\"uuid\": \"f665213b-87ae-4faa-accb-03fd863138d8\", \"name\": \"HAE_METER_v3_4\", \"internalAddress\": \"2.4\", \"type\": \"HAE_METER_v3_4\", \"supportsCrc\": \"0\", \"ccList\": \"5e 59 85 8e 3c 3d 3e\", \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\", \"nodeFlags\": [], \"CurrentSensorStatus\": \"WARNING\", \"DeviceName\": \"HAE_METER_v3_4\", \"CurrentElectricityFlow\": \"499.00\", \"CurrentElectricityQuantity\": \"2356741.00\"}, \"dev_2.5\": {\"uuid\": \"41b82ea8-7b8a-4eed-b570-b562fd303ac7\", \"name\": \"HAE_METER_v3_5\", \"internalAddress\": \"2.5\", \"type\": \"HAE_METER_v3_5\", \"supportsCrc\": \"0\", \"ccList\": \"5e 59 85 8e 3c 3d 3e\", \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\", \"nodeFlags\": [], \"CurrentSensorStatus\": \"UNKNOWN\", \"DeviceName\": \"HAE_METER_v3_5\", \"CurrentElectricityFlow\": \"312.00\", \"CurrentElectricityQuantity\": \"1287325.00\"}, \"dev_2.6\": {\"uuid\": \"bffb19a2-6dfa-4c40-906b-1051e7e91a74\", \"name\": \"HAE_METER_v3_6\", \"internalAddress\": \"2.6\", \"type\": \"HAE_METER_v3_6\", \"supportsCrc\": \"0\", \"ccList\": \"5e 59 85 8e 3c 3d 3e\", \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\", \"nodeFlags\": [], \"CurrentSensorStatus\": \"UNKNOWN\", \"DeviceName\": \"HAE_METER_v3_6\", \"CurrentElectricityFlow\": \"0.00\", \"CurrentElectricityQuantity\": \"1862969.00\"}, \"dev_2.7\": {\"uuid\": \"828d2fba-f815-4b20-9ff9-f8ec0fa4e21e\", \"name\": \"HAE_METER_v3_7\", \"internalAddress\": \"2.7\", \"type\": \"HAE_METER_v3_7\", \"supportsCrc\": \"0\", \"ccList\": \"5e 59 85 8e 3c 3d 3e\", \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\", \"nodeFlags\": [], \"CurrentSensorStatus\": \"UNKNOWN\", \"DeviceName\": \"HAE_METER_v3_7\", \"CurrentElectricityFlow\": \"0.00\", \"CurrentElectricityQuantity\": \"923615.00\"}, \"dev_2.8\": {\"uuid\": \"f76e822a-b29e-4007-901f-4cc7d52fbc68\", \"name\": \"HAE_METER_v3_8\", \"internalAddress\": \"2.8\", \"type\": \"HAE_METER_v3_8\", \"supportsCrc\": \"0\", \"ccList\": \"5e 59 85 8e 3c 3d 3e\", \"supportedCC\": \"5e 59 85 8e 3c 3d 3e\", \"nodeFlags\": [], \"CurrentSensorStatus\": \"UNKNOWN\", \"DeviceName\": \"HAE_METER_v3_8\", \"CurrentHeatQuantity\": \"NaN\", \"CurrentHeatFlow\": \"NaN\"}}'\n \n  jsonTable = json.decode(apiResult) -- Decode the json string from api to lua-table \n\n  self:valuesToon() -- Get the values\n  self:updateLabels() -- Update the labels\n  self:updateProperties() -- Update the properties\n  self:updateChildDevices() -- Update the Child Devices\n  --self:updateVariables() -- Update the Global Variables Temporarily disabled\n  \n  self:logging(3,\"SetTimeout \" ..Interval ..\" seconds\")\n  fibaro.setTimeout(Interval*1000, function() \n     self:simData()\n  end)\nend\n\n\nfunction QuickApp:getData() -- Get data from Toon\n  self:logging(3,\"getData\")\n  local url = \"http://\" ..IPaddress ..Path\n  self:logging(3,\"url: \" ..url)\n  self.http:request(url, {\n  options = {\n    headers = {Accept = \"application/json\"}, method = 'GET'},\n    success = function(response)\n      self:logging(3,\"Response status: \" ..response.status)\n      self:logging(3,\"Response data: \" ..response.data)\n\n      local apiResult = response.data        \n      jsonTable = json.decode(apiResult) -- Decode the json string from api to lua-table\n\n      self:valuesToon() -- Get the values\n      self:updateLabels() -- Update the labels\n      self:updateProperties() -- Update the properties\n      self:updateChildDevices() -- Update the Child Devices\n      --self:updateVariables() -- Update the Global Variables Temporarily disabled\n\n    end,\n    error = function(error)\n      self:error(\"error: \" ..json.encode(error))\n      self:updateProperty(\"log\", \"error: \" ..json.encode(error))\n    end\n  }) \n  fibaro.setTimeout(Interval*1000, function() -- Checks every [Interval] seconds for new data\n    self:getData()\n  end)\nend \n\n\nfunction QuickApp:createVariables() -- Get all Quickapp Variables or create them\n  Path = \"/hdrv_zwave?action=getDevices.json\" -- Default path Current\n\n  data = {}\n  data.Consumption = \"\"\n  data.Consumption_H = \"\"\n  data.Consumption_L = \"\"\n  data.Consumption_Total = \"\"\n  data.Consumption_Total_H = \"\"\n  data.Consumption_Total_L = \"\"\n  data.Production = \"\"\n  data.Production_H = \"\"\n  data.Production_L = \"\"\n  data.Production_Total = \"\"\n  data.Production_Total_H = \"\"\n  data.Production_Total_L = \"\"\n  data.netConsumption = \"\"\n  data.Gas_Usage = \"\"\n  data.Gas_Total = \"\"\n\nend\n\n\nfunction QuickApp:getQuickappVariables() -- Get all Quickapp Variables or create them\n  IPaddress = self:getVariable(\"IPaddress\")\n  Interval = tonumber(self:getVariable(\"Interval\")) \n  debugLevel = tonumber(self:getVariable(\"debugLevel\"))\n\n  -- Check existence of the mandatory variables, if not, create them with default values \n  if IPaddress == \"\" or IPaddress == nil then \n    IPaddress = \"192.168.1.50\" -- Default IPaddress \n    self:setVariable(\"IPaddress\", IPaddress)\n    self:trace(\"Added QuickApp variable IPaddress\")\n  end\n  if Interval == \"\" or Interval == nil then\n    Interval = \"10\" -- Default interval in seconds\n    self:setVariable(\"Interval\", Interval)\n    self:trace(\"Added QuickApp variable Interval\")\n    Interval = tonumber(Interval)\n  end\n  if debugLevel == \"\" or debugLevel == nil then\n    debugLevel = \"1\" -- Default value for debugLevel\n    self:setVariable(\"debugLevel\",debugLevel)\n    self:trace(\"Added QuickApp variable debugLevel\")\n    debugLevel = tonumber(debugLevel)\n  end\n  self:logging(3,\"Interval: \" ..Interval)\nend\n\n\nfunction QuickApp:setupChildDevices() -- Setup Child Devices\n  local cdevs = api.get(\"/devices?parentId=\"..self.id) or {} -- Pick up all Child Devices\n  function self:initChildDevices() end -- Null function, else Fibaro calls it after onInit()...\n\n  if #cdevs == 0 then -- If no Child Devices, create them\n    local initChildData = { \n      {className=\"consumption\", name=\"Consumption\", type=\"com.fibaro.powerSensor\", value=0}, \n      {className=\"production\", name=\"Production\", type=\"com.fibaro.powerSensor\", value=0},\n      {className=\"consumption_high\", name=\"Consumption High\", type=\"com.fibaro.energyMeter\", value=0},\n      {className=\"consumption_low\", name=\"Consumption Low\", type=\"com.fibaro.energyMeter\", value=0},\n      {className=\"production_high\", name=\"Production High\", type=\"com.fibaro.energyMeter\", value=0},\n      {className=\"production_low\", name=\"Production Low\", type=\"com.fibaro.energyMeter\", value=0},\n      {className=\"gas\", name=\"Gas\", type=\"com.fibaro.multilevelSensor\", value=0},\n      {className=\"total_gas\", name=\"Gas Total\", type=\"com.fibaro.multilevelSensor\", value=0},\n    }\n    for _,c in ipairs(initChildData) do\n      local child = self:createChildDevice(\n        {name = c.name,\n          type=c.type,\n          value=c.value,\n          unit=c.unit,\n          initialInterfaces = {},\n        },\n        _G[c.className] -- Fetch class constructor from class name\n      )\n      child:setVariable(\"className\",c.className)  -- Save class name so we know when we load it next time\n    end   \n  else \n    for _,child in ipairs(cdevs) do\n      local className = getChildVariable(child,\"className\") -- Fetch child class name\n      local childObject = _G[className](child) -- Create child object from the constructor name\n      self.childDevices[child.id]=childObject\n      childObject.parent = self -- Setup parent link to device controller \n    end\n  end\nend\n \n\nfunction QuickApp:onInit()\n  __TAG = fibaro.getName(plugin.mainDeviceId) ..\" ID:\" ..plugin.mainDeviceId\n  self.http = net.HTTPClient({timeout=3000})\n  self:debug(\"onInit\")\n  self:setupChildDevices() -- Setup the Child Devices \n  self:getQuickappVariables() -- Get Quickapp Variables or create them\n  self:createVariables() -- Create Variables\n    \n  if tonumber(debugLevel) >= 4 then \n    self:simData() -- Go in simulation\n  else\n    self:getData() -- Get data\n  end\n    \nend\n\n-- EOF"}]}